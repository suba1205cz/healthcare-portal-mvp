generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(PATIENT)
  createdAt DateTime  @default(now())

  // 1:1
  profile   Profile?

  // all bookings where this user is the patient
  bookings  Booking[] @relation("PatientBookings")
}

model Profile {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @unique
  bio            String?
  specialties    String?
  location       String?
  hourlyRate     Float?

  // a professional can have many slots
  availabilities Availability[]

  // a professional can have many bookings
  bookings       Booking[]
}

model Availability {
  id           Int        @id @default(autoincrement())
  professional Profile    @relation(fields: [profileId], references: [id])
  profileId    Int
  start        DateTime
  end          DateTime
  isBooked     Boolean    @default(false)
}

model Booking {
  id             Int        @id @default(autoincrement())

  // patient side
  patient        User       @relation("PatientBookings", fields: [patientId], references: [id])
  patientId      Int

  // professional side
  professional   Profile    @relation(fields: [professionalId], references: [id])
  professionalId Int

  start          DateTime
  end            DateTime
  createdAt      DateTime   @default(now())
  status         BookingStatus @default(CONFIRMED)
}

enum Role {
  PATIENT
  PROFESSIONAL
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
}
